name: Validate Team Ownership

on:
  pull_request:
    paths:
      - 'teams/**'

jobs:
  validate-ownership:
    name: Validate Team Ownership
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get PR author
        id: pr-author
        run: |
          echo "username=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT
      
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          files: teams/**
          separator: ','
      
      - name: Validate ownership
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          PR_AUTHOR="${{ steps.pr-author.outputs.username }}"
          CHANGED_FILES="${{ steps.changed-files.outputs.all_changed_files }}"
          
          echo "üîç Validating team ownership for PR by @${PR_AUTHOR}"
          echo "üìÅ Changed files: ${CHANGED_FILES}"
          
          # Convert comma-separated list to array
          IFS=',' read -ra FILES <<< "$CHANGED_FILES"
          
          # Track validation status
          VALIDATION_PASSED=true
          INVALID_FILES=""
          
          # Check each changed file
          for file in "${FILES[@]}"; do
            # Extract the team directory name (teams/USERNAME/...)
            if [[ "$file" =~ ^teams/([^/]+)/ ]]; then
              TEAM_DIR="${BASH_REMATCH[1]}"
              
              # Check if team directory matches PR author
              if [ "$TEAM_DIR" != "$PR_AUTHOR" ]; then
                echo "‚ùå ERROR: User @${PR_AUTHOR} cannot modify teams/${TEAM_DIR}/"
                echo "   File: ${file}"
                VALIDATION_PASSED=false
                INVALID_FILES="${INVALID_FILES}\n  - ${file}"
              else
                echo "‚úÖ Valid: ${file}"
              fi
            else
              echo "‚ö†Ô∏è  Warning: Unexpected file structure: ${file}"
            fi
          done
          
          # Fail if validation didn't pass
          if [ "$VALIDATION_PASSED" = false ]; then
            echo ""
            echo "‚ùå Validation Failed!"
            echo ""
            echo "You can only modify files in your own team directory: teams/${PR_AUTHOR}/"
            echo ""
            echo "Invalid modifications detected:${INVALID_FILES}"
            echo ""
            echo "Please ensure you only edit files within teams/${PR_AUTHOR}/"
            exit 1
          else
            echo ""
            echo "‚úÖ All validations passed!"
            echo "User @${PR_AUTHOR} is only modifying their own team directory."
          fi
      
      - name: Post validation comment
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const prAuthor = '${{ steps.pr-author.outputs.username }}';
            const validationPassed = ${{ job.status == 'success' }};
            
            let comment = '## üèÜ Team Ownership Validation\n\n';
            
            if (validationPassed) {
              comment += `‚úÖ **Validation Passed**\n\n`;
              comment += `User @${prAuthor} is correctly modifying their own team directory.\n`;
            } else {
              comment += `‚ùå **Validation Failed**\n\n`;
              comment += `User @${prAuthor} can only modify files in \`teams/${prAuthor}/\`\n\n`;
              comment += `### How to Fix\n`;
              comment += `1. Only edit files within your team directory: \`teams/${prAuthor}/\`\n`;
              comment += `2. If you accidentally modified other files, revert those changes\n`;
              comment += `3. Push the corrected changes to update this PR\n`;
            }
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Team Ownership Validation')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
      
      - name: Set PR status
        if: always()
        run: |
          if [ "${{ job.status }}" != "success" ]; then
            echo "::error::Team ownership validation failed. Users can only modify their own team directory."
            exit 1
          fi